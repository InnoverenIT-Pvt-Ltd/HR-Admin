{"version":3,"file":"static/js/693.3d1ab282.chunk.js","mappings":"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","sources":["Container/Profile/Child/ProfileCards/ProfileOverviewView.js","Components/UI/Elements/ViewEditCard1.js","Container/Profile/Child/ProfileCards/ProfileOverviewCard.js","Container/Profile/Child/ProfileCards/ProfileStatsView.js","Container/Profile/Child/ProfileCards/ProfileStatsCard.js","Container/Profile/Child/ProfileCards/ProfileAddressView.js","Container/Profile/Child/ProfileCards/ProfileAddressCard.js","Container/Profile/Child/ProfileDetailLeft.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Button } from \"antd\";\r\n// import { handleMapModal } from \"../../ProfileAction\";\r\n\r\nimport axios from \"axios\";\r\nimport { base_url } from \"../../../../Config/Auth\";\r\nimport { InputComponent } from \"../../../../Components/Forms/Formik/InputComponent\";\r\nimport FormikPlacesAutoComplete from \"../../../../Components/Forms/Formik/FormikPlacesAutoComplete\";\r\nimport { StyledModal } from \"../../../../Components/UI/Antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport {\r\n  Title,\r\n  SubTitle,\r\n  MultiAvatar,\r\n} from \"../../../../Components/UI/Elements\";\r\nimport { FlexContainer } from \"../../../../Components/UI/Layout\";\r\nimport { ActionIcon, Leaflet } from \"../../../../Components/Utils\";\r\nimport { AddressComponent } from \"../../../../Components/Common\";\r\n\r\n// import L from \"leaflet\";\r\n\r\n\r\n\r\nclass ProfileOverviewView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mapModalVisible: false,\r\n      addAddressVisible: false,\r\n    };\r\n  }\r\n  handleMapModalVisible = () =>\r\n    this.setState({ mapModalVisible: !this.state.mapModalVisible });\r\n  handleAddAddressVisible = () =>\r\n    this.setState({ addAddressVisible: !this.state.addAddressVisible });\r\n\r\n  addAddress = (address) => {\r\n    axios\r\n      .post(`${base_url}/address`, address, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + sessionStorage.getItem(\"token\") || \"\",\r\n        },\r\n      })\r\n      .then((res) => console.log(res))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n    //   user: { address },\r\n      toggleViewType,\r\n    //   user,\r\n    } = this.props;\r\n    const { addAddressVisible } = this.state;\r\n    // console.clear()\r\n    console.log(this.props.user);\r\n   \r\n    return (\r\n      <>\r\n        <FlexContainer justifyContent=\"space-between\">\r\n          <FlexContainer\r\n            justifyContent=\"flex-start\"\r\n            flexWrap=\"nowrap\"\r\n            style={{ width: \"85%\" }}\r\n          >\r\n            <div style={{ width: \"20%\" }}>\r\n              <MultiAvatar\r\n                // primaryTitle={user.firstName}\r\n                // imageId={user.imageId}\r\n                // imageURL={user.imageURL}\r\n              />\r\n            </div>\r\n            &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <FlexContainer flexDirection=\"column\" style={{ width: \"80%\" }}>\r\n              <Title\r\n                overflow=\"hidden\"\r\n                textOverflow=\"ellipsis\"\r\n                fontSize={\"1.375em\"}\r\n              >\r\n                {/* {`${user.fullName || \"\"} `} */}\r\n              </Title>\r\n            </FlexContainer>\r\n          </FlexContainer>\r\n          <FlexContainer style={{ width: \"15%\" }} justifyContent=\"flex-end\">\r\n            {/* <ActionIcon\r\n              tooltipTitle=\"Address\"\r\n              iconType=\"environment\"\r\n              handleIconClick={this.handleMapModalVisible}\r\n              size=\"1em\"\r\n            />{\" \"}\r\n            &nbsp; */}\r\n            {/* <ActionIcon\r\n              tooltipTitle=\"Address\"\r\n              iconType=\"environment\"\r\n              handleIconClick={this.handleMapModalVisible}\r\n              size=\"1em\"\r\n            />{\" \"} */}\r\n            &nbsp;&nbsp;\r\n            <ActionIcon\r\n              tooltipTitle=\"Edit\"\r\n              iconType=\"edit\"\r\n              handleIconClick={toggleViewType}\r\n              size=\"1em\"\r\n            />\r\n          </FlexContainer>\r\n        </FlexContainer>\r\n\r\n        {/* <StyledModal\r\n          title={`${user.name || \"\"} `}\r\n          width=\"65%\"\r\n          visible={this.state.mapModalVisible}\r\n          maskClosable={false}\r\n          maskStyle={{ backgroundColor: \"rgba(1, 30, 71,0.7)\" }}\r\n        \r\n          footer={null}\r\n        >\r\n          <>\r\n            <FlexContainer>\r\n              {!address ? (\r\n                <>\r\n             \r\n                  {addAddressVisible && (\r\n                    <AddressField\r\n                      userId={user.userId}\r\n                      addAddress={this.addAddress}\r\n                      handleAddAddressVisible={this.handleAddAddressVisible}\r\n                    />\r\n                  )}\r\n                </>\r\n              ) : null}\r\n              <FlexContainer\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"flex-start\"\r\n                flexWrap=\"nowrap\"\r\n              >\r\n                <div>\r\n                  <div className=\"product3\" style={{ width: \"180\" }}>\r\n                    {address &&\r\n                      address.map((components, i) => (\r\n                        <AddressComponent\r\n                          key={i}\r\n                          editable\r\n                          editAddressType=\"user\"\r\n                          customerId={user.customerId}\r\n                          components={components}\r\n                        />\r\n                      ))}\r\n                  </div>\r\n                 \r\n                </div>\r\n                <div class=\"vl\"></div>\r\n                \r\n              </FlexContainer>\r\n            </FlexContainer>\r\n          </>\r\n        </StyledModal> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ profile }) => ({\r\n//   addMapModal: profile.addMapModal,\r\n});\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n    //   handleMapModal,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProfileOverviewView);\r\n\r\nclass AddressField extends Component {\r\n  render() {\r\n    const { userId, addAddress, handleAddAddressVisible } = this.props;\r\n    return (\r\n      <>\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={{\r\n            address: {\r\n              address1: \"\",\r\n              address2: \"\",\r\n              street: \"\",\r\n              town: \"\",\r\n              city: \"\",\r\n              state: \"\",\r\n              country: \"\",\r\n              postalCode: \"\",\r\n              latitude: \"\",\r\n              longitude: \"\",\r\n            },\r\n          }}\r\n          onSubmit={(values) => {\r\n            console.log(values);\r\n            const newAddress = {\r\n              ...values.address,\r\n\r\n              userId: userId,\r\n            };\r\n            console.log(newAddress);\r\n            addAddress(newAddress);\r\n          }}\r\n        >\r\n          {({\r\n            errors,\r\n            touched,\r\n            isSubmitting,\r\n            setFieldValue,\r\n            setFieldTouched,\r\n            values,\r\n            ...rest\r\n          }) => (\r\n              <Form className=\"form-background\">\r\n                <Field\r\n                  name={`address`}\r\n                  label=\"Work place\"\r\n                  component={FormikPlacesAutoComplete}\r\n                  options={{}}\r\n                />\r\n                <Field\r\n                  label=\"Address1\"\r\n                  name=\"address.address1\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n                <Field\r\n                  label=\"address2\"\r\n                  name=\"address.address2\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n                <Field\r\n                  label=\"street\"\r\n                  name=\"address.street\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n                <Field\r\n                  label=\"town\"\r\n                  name=\"address.town\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n                <Field\r\n                  label=\"city\"\r\n                  name=\"address.city\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n                <Field\r\n                  label=\"state\"\r\n                  name=\"address.state\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n                <Field\r\n                  label=\"country\"\r\n                  name=\"address.country\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n                <Field\r\n                  label=\"postalCode\"\r\n                  name=\"address.postalCode\"\r\n                  component={InputComponent}\r\n                // defaultValue='low'\r\n                />\r\n\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                  {/* Save */}\r\n                  <FormattedMessage\r\n              id=\"app.save\"\r\n              defaultMessage=\"Save\"\r\n            />\r\n              </Button>\r\n                <Button type=\"default\" onClick={handleAddAddressVisible}>\r\n                  {/* Cancel */}\r\n                  <FormattedMessage\r\n              id=\"app.cancel\"\r\n              defaultMessage=\"Cancel\"\r\n            />\r\n              </Button>\r\n              </Form>\r\n            )}\r\n        </Formik>\r\n      </>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport { MainWrapper } from \"../Layout\";\r\n\r\nclass ViewEditCard1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewType: \"view\",\r\n    };\r\n  }\r\n  toggleViewType = () => {\r\n    this.setState((prevState) => {\r\n      if (prevState.viewType === \"view\") {\r\n        return { viewType: \"edit\" };\r\n      } else {\r\n        return { viewType: \"view\" };\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div style={{boxShadow: \"0.01rem 0.01rem 0.12rem 0.01rem\"}} class=\" rounded-md shadow-2xl border-solid m-1 p-1 max-sm:grid  w-wk  md:\" Height={this.props.Height}>\r\n        {this.props.children(this.state, this.toggleViewType)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewEditCard1;","import React, { Component } from \"react\";\r\nimport { ViewEditCard } from \"../../../../Components/UI/Elements\";\r\nimport ProfileOverviewView from \"./ProfileOverviewView\";\r\nimport ProfileOverviewEdit from \"./ProfileOverviewEdit\";\r\nimport ViewEditCard1 from \"../../../../Components/UI/Elements/ViewEditCard1\";\r\n\r\nclass ProfileOverviewCard extends Component {\r\n  render() {\r\n    // const { user } = this.props;\r\n    // console.log(user);\r\n    return (\r\n      <div>\r\n        <ViewEditCard1>\r\n          {({ viewType }, toggleViewType) =>\r\n            viewType === \"view\" ? (\r\n              <ProfileOverviewView\r\n                // user={user}\r\n                // toggleViewType={toggleViewType}\r\n              />\r\n            ) : (\r\n              <ProfileOverviewEdit\r\n                // user={user}\r\n                // toggleViewType={toggleViewType}\r\n              />\r\n            )\r\n          }\r\n        </ViewEditCard1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfileOverviewCard;","import React, { Component } from \"react\";\r\nimport { Divider, Tooltip } from \"antd\";\r\n// import { elipsize } from \"../../../../Helpers/Function/Functions\";\r\nimport {\r\n  Title,\r\n  SubTitle,\r\n  MultiAvatar,\r\n  StyledLabel,\r\n} from \"../../../../Components/UI/Elements\";\r\n// import EditIcon from '@mui/icons-material/Edit';\r\nimport moment from \"moment\";\r\nimport { FlexContainer } from \"../../../../Components/UI/Layout\";\r\nimport { ActionIcon } from \"../../../../Components/Utils\";\r\nclass ProfileStatsView extends Component {\r\n  render() {\r\n    const {\r\n    //   user: {\r\n       \r\n    //     phoneNo,\r\n    \r\n    //     emailId,\r\n    //     creationDate,\r\n    //     imageId,\r\n    //     language,\r\n    //     dialCode, \r\n    //     firstName,      \r\n    //   },\r\n      toggleViewType,\r\n    } = this.props;\r\n    \r\n    return (\r\n      <>\r\n        <FlexContainer justifyContent=\"flex-end\">\r\n          {/* <EditIcon\r\n            tooltipTitle=\"Edit\"\r\n            // iconType=\"edit\"\r\n            onClick={toggleViewType}\r\n            size=\"1em\"\r\n          /> */}\r\n        </FlexContainer>\r\n        {/* <ProfileItemRow label=\"Name\" value={firstName} /> */}\r\n        <ProfileItemRow label=\"Email\" \r\n        // value={emailId}\r\n         />\r\n        <ProfileItemRow label=\"Phone No\"\r\n        //  value={`${dialCode} ${phoneNo}`\r\n        //  } \r\n         />\r\n       \r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfileStatsView;\r\n\r\nconst ProfileItemRow = ({ label, value }) => {\r\n  return (\r\n    <FlexContainer\r\n      alignItems=\"center\"\r\n      flexWrap=\"nowrap\"\r\n      style={{ margin: \"0.4rem\" }}\r\n      width=\"2.5em\"\r\n    >\r\n      <SubTitle style={{ color: \"#444\", fontWeight: 600 }}>{label}</SubTitle>\r\n      <SubTitle\r\n        overflow=\"hidden\"\r\n        textOverflow=\"ellipsis\"\r\n        style={{ marginLeft: \"-4rem\" }}\r\n      >\r\n        <Tooltip title={value} placement=\"topLeft\">\r\n          {/* {elipsize(value, 27)} */}\r\n          {value}\r\n        </Tooltip>\r\n      </SubTitle>\r\n    </FlexContainer>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport { ViewEditCard } from \"../../../../Components/UI/Elements\";\r\nimport ProfileStatsView from \"./ProfileStatsView\";\r\nimport ProfileStatsEdit from \"./ProfileStatsEdit\";\r\nimport ViewEditCard1 from '../../../../Components/UI/Elements/ViewEditCard1';\r\n\r\nclass ProfileAboutCard extends Component {\r\n    render() {\r\n        // const { user } = this.props;\r\n        // console.log(user)\r\n        return (\r\n            <div>\r\n                <ViewEditCard1>\r\n                    {({ viewType }, toggleViewType) => (\r\n                        viewType === 'view'\r\n                            ? <ProfileStatsView\r\n                                // user={user}\r\n                                // toggleViewType={toggleViewType}\r\n                            />\r\n                            : <ProfileStatsEdit\r\n                                // user={user}\r\n                                // toggleViewType={toggleViewType}\r\n                            />\r\n                    )}\r\n                </ViewEditCard1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileAboutCard;","import React, { Component } from \"react\";\r\nimport { Divider, Tooltip } from \"antd\";\r\n//import { elipsize } from \"../../../../Helpers/Function/Functions\";\r\nimport {\r\n  Title,\r\n  SubTitle,\r\n  MultiAvatar,\r\n  StyledLabel,\r\n} from \"../../../../Components/UI/Elements\";\r\n//import EditIcon from '@mui/icons-material/Edit';\r\nimport moment from \"moment\";\r\nimport { FlexContainer } from \"../../../../Components/UI/Layout\";\r\nimport { ActionIcon } from \"../../../../Components/Utils\";\r\n\r\nclass ProfileAddressView extends Component {\r\n    render() {\r\n      const {\r\n        // user: {\r\n        //     address1,\r\n        //     street,\r\n        //     city,\r\n        //     state,\r\n        //     country,\r\n        //     pinCode,\r\n        //     latitude,\r\n        //     longitude, \r\n        // },\r\n        toggleViewType,\r\n      } = this.props;\r\n      \r\n      return (\r\n        <>\r\n          <FlexContainer justifyContent=\"flex-end\">\r\n            {/* <EditIcon\r\n              tooltipTitle=\"Edit\"\r\n             \r\n              onClick={toggleViewType}\r\n              size=\"1em\"\r\n            /> */}\r\n          </FlexContainer>\r\n          <ProfileItemRow label=\"Address1\" \r\n        //   value={address1} \r\n          />\r\n          <ProfileItemRow label=\"Street\" \r\n        //   value={street} \r\n          />\r\n          <ProfileItemRow label=\"City\" \r\n        //   value={city} \r\n          />\r\n          <ProfileItemRow label=\"State\" \r\n        //   value={state} \r\n          />\r\n          <ProfileItemRow label=\"Country\" \r\n        //   value={country}\r\n          />  \r\n          <ProfileItemRow label=\"PinCode\" \r\n        //   value={pinCode} \r\n          />\r\n          \r\n        </>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default ProfileAddressView;\r\n  \r\n  const ProfileItemRow = ({ label, value }) => {\r\n    return (\r\n      <FlexContainer\r\n        alignItems=\"center\"\r\n        flexWrap=\"nowrap\"\r\n        style={{ margin: \"0.4rem\" }}\r\n        width=\"2.5em\"\r\n      >\r\n        <SubTitle style={{ color: \"#444\", fontWeight: 600 }}>{label}</SubTitle>\r\n        <SubTitle\r\n          overflow=\"hidden\"\r\n          textOverflow=\"ellipsis\"\r\n          style={{ marginLeft: \"-4rem\" }}\r\n        >\r\n          <Tooltip title={value} placement=\"topLeft\">\r\n           \r\n            {value}\r\n          </Tooltip>\r\n        </SubTitle>\r\n      </FlexContainer>\r\n    );\r\n  };\r\n","import React, { Component } from 'react';\r\nimport AddressFieldArray from '../../../../Components/Forms/Formik/AddressFieldArray';\r\nimport { FieldArray } from \"formik\";\r\nimport { FormattedMessage } from \"react-intl\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { Button, Tooltip } from \"antd\";\r\nimport { FlexContainer } from \"../../../../Components/UI/Layout\";\r\nimport { InputComponent } from \"../../../../Components/Forms/Formik/InputComponent\";\r\nimport FormikPlacesAutoComplete from \"../../../../Components/Forms/Formik/FormikPlacesAutoComplete\";\r\nimport { ViewEditCard } from \"../../../../Components/UI/Elements\";\r\nimport ProfileAddressView from \"./ProfileAddressView\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport ViewEditCard1 from '../../../../Components/UI/Elements/ViewEditCard1';\r\n\r\nclass ProfileAddressCard extends Component {\r\nconstructor(props){\r\n  super(props);\r\n  this.state={\r\n    \r\n  }\r\n}\r\n    render() {\r\n     \r\n      const { toggleViewType } = this.props;\r\n    // console.log(user);\r\n        return (\r\n            <div >\r\n               <ViewEditCard1>\r\n               {({ viewType }, toggleViewType) => (\r\n                        viewType === 'view' ? (\r\n                          <ProfileAddressView \r\n                        //   user={user.addressDetailsDTO}\r\n                        //   toggleViewType={toggleViewType}\r\n                          />\r\n                           ):( \r\n                        <AddressField\r\n                    //   customerId={user.customerId}\r\n                    //   user={user.addressDetailsDTO}\r\n                    //   updateCustomerById={this.props.updateCustomerById}\r\n                    //   toggleViewType={toggleViewType}\r\n                    />)\r\n                               \r\n                    )}\r\n               \r\n               </ViewEditCard1>\r\n           \r\n                    </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass AddressField extends Component {\r\n\r\n  render() {\r\n    // const { userId, addAddress, toggleViewType } = this.props;\r\n    return (\r\n      <>\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={{\r\n            addressDetailsDTO:\r\n            [\r\n               {\r\n                // props.shopDetails.addresses && props.shopDetails.addresses.length ? props.shopDetails.addresses[0].address1:\"\"\r\n            //   address1: this.props.user.address1 || \"\",\r\n            //   // address2: \"\",\r\n            //   street:this.props.user.street || \"\",\r\n            //   // town: \"\",\r\n            //   city: this.props.user.city || \"\",\r\n            //   state: this.props.user.state || \"\",\r\n            //   country: this.props.user.country || \"\",\r\n            //   pinCode:this.props.user.pinCode || \"\",\r\n            //   latitude: \"\",\r\n            //   longitude: \"\",\r\n            },\r\n          ]\r\n          }}\r\n        //   onSubmit={(values) => {\r\n        //     console.log(values);\r\n        //     // const newAddress = {\r\n        //     //   ...values.address,\r\n        //     // };\r\n        //     this.props.updateCustomerById(values);\r\n        //     toggleViewType()\r\n        //   }}\r\n        >\r\n          {({\r\n            errors,\r\n            touched,\r\n            isSubmitting,\r\n            setFieldValue,\r\n            setFieldTouched,\r\n            values,\r\n            ...rest\r\n          }) => (\r\n            <Form>\r\n              <div style={{width:\"55%\"}}>\r\n              <Field\r\n               \r\n                 label=\"Work place\"\r\n               \r\n                component={FormikPlacesAutoComplete}\r\n                options={{}}\r\n              /></div>\r\n              <Field\r\n                 label=\"Address1\"\r\n                \r\n                // name=\"addressDetailsDTO[0].address1\"\r\n                component={InputComponent}\r\n              // defaultValue='low'\r\n              />\r\n             \r\n              <Field\r\n                 label=\"street\"\r\n               \r\n                // name=\"addressDetailsDTO[0].street\"\r\n                component={InputComponent}\r\n              // defaultValue='low'\r\n              />\r\n            \r\n              <Field\r\n                 label=\"city\"\r\n                \r\n                // name=\"addressDetailsDTO[0].city\"\r\n                component={InputComponent}\r\n              // defaultValue='low'\r\n              />\r\n              <Field\r\n            label=\"state\"\r\n                \r\n                // name=\"addressDetailsDTO[0].state\"\r\n                component={InputComponent}\r\n              // defaultValue='low'\r\n              />\r\n              <Field\r\n                label=\"country\"\r\n               \r\n                // name=\"addressDetailsDTO[0].country\"\r\n                component={InputComponent}\r\n              // defaultValue='low'\r\n              />\r\n              <Field\r\n                label=\"postalCode\"\r\n                // label={<FormattedMessage\r\n                //   id=\"app.pincode\"\r\n                //   defaultMessage=\"Pin Code\"\r\n                // />}\r\n                // name=\"addressDetailsDTO[0].pinCode\"\r\n                component={InputComponent}\r\n              // defaultValue='low'\r\n              />\r\n            <FlexContainer justifyContent=\"flex-end\" marginRight=\"1.25em\">\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Save\r\n              \r\n              </Button>\r\n              &nbsp;\r\n              <Button type=\"default\" \r\n            //   onClick={toggleViewType}\r\n              >\r\n                Cancel\r\n               \r\n              </Button>\r\n              </FlexContainer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ auth }) => ({\r\n//   updatingUserById: auth.updatingUserById,\r\n//   updatingUserByIdError: auth.updatingUserByIdError,\r\n});\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n    //   updateCustomerById,\r\n    },\r\n    dispatch\r\n  );\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileAddressCard);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { FlexContainer } from \"../../../Components/UI/Layout\";\r\nimport ProfileOverviewCard from \"./ProfileCards/ProfileOverviewCard\";\r\n\r\n import ProfileStatsCard from \"./ProfileCards/ProfileStatsCard\";\r\n\r\nimport ProfileAddressCard from \"./ProfileCards/ProfileAddressCard\";\r\nclass ProfileDetailLeft extends Component {\r\n  render() {\r\n    // const { userDetails } = this.props;\r\n    // console.log(userDetails);\r\n    return (\r\n      <div class=\"max-sm:w-80 flex flex-col h-full\" >\r\n        <ProfileOverviewCard \r\n        // user={userDetails} \r\n        />\r\n   \r\n        <ProfileStatsCard \r\n        // user={userDetails}\r\n         />\r\n        <ProfileAddressCard \r\n        // user={userDetails}\r\n        />\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({ auth }) => ({\r\n  userDetails: auth.userDetails,\r\n});\r\nconst mapDispatchToProps = (dispatch) => bindActionCreators({}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDetailLeft);"],"names":["ProfileOverviewView","props","handleMapModalVisible","setState","mapModalVisible","state","handleAddAddressVisible","addAddressVisible","addAddress","address","axios","base_url","headers","Authorization","sessionStorage","getItem","then","res","console","log","catch","err","toggleViewType","this","user","justifyContent","flexWrap","style","width","flexDirection","overflow","textOverflow","fontSize","A","tooltipTitle","iconType","handleIconClick","size","Component","connect","profile","dispatch","bindActionCreators","prevState","viewType","boxShadow","class","Height","children","ProfileOverviewCard","ProfileStatsView","ProfileItemRow","label","value","alignItems","margin","color","fontWeight","marginLeft","title","placement","ProfileAboutCard","ProfileAddressView","ProfileAddressCard","AddressField","enableReinitialize","initialValues","addressDetailsDTO","errors","touched","isSubmitting","setFieldValue","setFieldTouched","values","component","FormikPlacesAutoComplete","options","InputComponent","marginRight","type","htmlType","auth","ProfileDetailLeft","ProfileStatsCard","userDetails"],"sourceRoot":""}